import re
import h5py
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
from skimage.feature import blob_log
from skimage import exposure
from scipy.ndimage import gaussian_filter

# ── CONFIG ─────────────────────────────────────────────────────────
BASE_DIRS = 
IMG_PATH = "/xy_scan/spatial_scan/photon_flux"
BG_PATH  = "/settings/min_background_level"
PATCH_SIZE = 21
h = PATCH_SIZE // 2


# ── SCAN LOOP & OBJECT DETECTION ──────────────────────────────────
all_candidates = []
candidate_scan_labels = []      # <<< NEW: record scan name per patch
scan_nv_counts = {}

for base in BASE_DIRS:
    sf = Path(base) / "scan_fields"
    if not sf.is_dir():
        continue

    for sd in sf.iterdir():
        if not sd.is_dir():
            continue
        h5s = list(sd.glob("*Candidates.h5"))
        if len(h5s) != 1:
            continue
        h5p = h5s[0]

        with h5py.File(h5p, "r") as f:
            img = f[IMG_PATH][()].astype("float32")
            bg  = float(f[BG_PATH][()]) if BG_PATH in f else 0.0
        img = np.clip(img - bg, 0, None)
        norm_img = exposure.rescale_intensity(img, out_range=(0, 1))

        # high‐pass background removal (Gaussian subtraction)
        blurred = gaussian_filter(norm_img, sigma=5)
        highpass = norm_img - blurred
        highpass = exposure.rescale_intensity(highpass, out_range=(0, 1))

        # blob detection
        blobs = blob_log(
            highpass,
            min_sigma=1.5, max_sigma=2.2,
            num_sigma=10, threshold=0.03
        )
        blobs = np.array([b for b in blobs if 1.5 < b[2] < 2.05])

        scan_nv_counts[sd.name] = len(blobs)

        print(f"\nScan: {sd.name}")
        if blobs.size > 0:
            fig, axes = plt.subplots(1, min(2, len(blobs)), figsize=(5,3))
            for i, blob in enumerate(blobs):
                y, x, sigma = blob
                y, x = int(round(y)), int(round(x))
                y0, y1 = y-h, y+h+1
                x0, x1 = x-h, x+h+1
                if y0<0 or x0<0 or y1>img.shape[0] or x1>img.shape[1]:
                    continue
                patch = img[y0:y1, x0:x1]
                if i<2:
                    axes[i].imshow(patch, cmap='hot')
                    axes[i].axis('off')
                    axes[i].set_title(f"x={x}, y={y}")
                all_candidates.append(patch)
                candidate_scan_labels.append(sd.name)   # <<< NEW: append scan label
            plt.suptitle(f"First 2 NV-Center Candidates in {sd.name}")
            plt.tight_layout()
            plt.show()
        else:
            print("No blobs detected.")

# ── Save patches & summary ─────────────────────────────────────────
if all_candidates:
    all_np = np.stack(all_candidates)
    labels_np = np.array(candidate_scan_labels)    # <<< NEW: convert labels to array
    np.save("nv_center_candidates.npy", all_np)
    np.save("nv_center_scan_labels.npy", labels_np)  # <<< NEW: save scan labels
    print(f"Saved {len(all_np)} candidate patches to nv_center_candidates.npy")
    print(f"Saved corresponding scan labels to nv_center_scan_labels.npy")

print(f"Total NV center candidates saved: {len(all_candidates)}")

# ── Histogram per scan ─────────────────────────────────────────────
plt.figure(figsize=(12,4))
plt.bar(
    list(scan_nv_counts.keys()),
    list(scan_nv_counts.values()),
    color='royalblue'
)
plt.xticks(rotation=45, ha='right')
plt.xlabel("Scan Field Name")
plt.ylabel("Detected NV Center Candidates")
plt.title("Number of NV Candidates per Scan")
plt.tight_layout()
plt.show()
print(labels_np[0])
